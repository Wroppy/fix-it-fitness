package com.example.fixitfitness.fitnessroutine;

import android.content.Intent;
import android.media.MediaCodec;
import android.util.Log;

import androidx.annotation.NonNull;

import com.example.fixitfitness.enums.BodyType;
import com.example.fixitfitness.enums.FootballLevel;
import com.example.fixitfitness.enums.InjuryType;

import java.nio.file.attribute.FileTime;
import java.util.ArrayList;
import java.util.List;

/**
 * Represents a routine that a user can follow.
 */

public class Routine {
    private List<FitnessSession> sessions;
    private int numSessions;

    /**
     * Creates a routine given the football level, injury type, and body type.
     *
     * @param level      the football level of the routine
     * @param injuryType any injuries that the routine has to take into account for
     * @param bodyType   the type of body for this routine
     */
    public Routine(FootballLevel level, InjuryType injuryType, BodyType bodyType) {
        this.sessions = new ArrayList<>();
        numSessions = level.getWeeklySessions();
        createRoutine(level, injuryType, bodyType);
    }


    /**
     * Creates a routine based on a routine string.
     * Routine string is generated by the class's String bundleToString() method.
     *
     * @param routineString a string represented a routine
     */
    public Routine(String routineString) {
        this.sessions = new ArrayList<>();
        String[] splitString = routineString.split("\n");
        int numSessions = Integer.parseInt(splitString[0]);

        // Creates and adds the sessions based on the routine string
        for (int i = 1; i <= numSessions; i++) {
            FitnessSession session = createSession(splitString[i]);
            sessions.add(session);
        }
    }

    /**
     * Given an intent usually taken when switching activities, builds a routine with the respective
     * sessions.
     * Works with the void bundleRoutine(Intent intent) method
     *
     * @param intent the intent passed from activity to activity with the routine data
     */
    public Routine(Intent intent) {
        this.sessions = new ArrayList<>();
        int numSessions = intent.getIntExtra("fitnessSessions", 0);

        this.numSessions = numSessions / 2;
        Log.d("NumSessions", "" + numSessions);

        for (int i = 0; i < numSessions; i++) {
            String sessionString = intent.getStringExtra("fitnessSession" + i);

            if (sessionString == null) {
                continue;
            }

            FitnessSession session = createSession(sessionString);
            sessions.add(session);
        }
    }

    private void createRoutine(FootballLevel level, InjuryType injuryType, BodyType bodyType) {
        FitnessSession firstGymSession, secondGymSession;
        int distance = getDistance(injuryType);

        // Gets the first and second gym session based on the injury type
        if (injuryType == InjuryType.UPPER_BODY) {
            firstGymSession = new UpperBodyGymSession();
            secondGymSession = new LowerBodyGymSession();
        } else {
            firstGymSession = new LowerBodyGymSession();
            secondGymSession = new UpperBodyGymSession();
        }

        switch (bodyType) {
            case LIGHT:
                addLightSessions(firstGymSession, secondGymSession, level);
                break;
            case MEDIUM:
                addMediumSessions(level, distance, firstGymSession, secondGymSession);
                break;
            case HEAVY:
                addHeavySessions(level, distance, firstGymSession, secondGymSession);
                break;
            case VERY_HEAVY:
                addVeryHeavySessions(level, distance);
                break;
        }
    }

    /**
     * Adds fitness sessions to the routine for a light body type.
     *
     * @param firstGymSession  the first gym session to add
     * @param secondGymSession the second gym session to add
     * @param level            the level of football the user is at
     */
    public void addLightSessions(FitnessSession firstGymSession, FitnessSession secondGymSession, FootballLevel level) {
        addFootballSession();
        sessions.add(firstGymSession.copy());
        addFootballSession();
        sessions.add(secondGymSession.copy());

        if (shouldAddExtraSession(level)) {
            addFootballSession();
            sessions.add(firstGymSession.copy());
        }

        repeatSessions();
    }

    /**
     * Adds fitness sessions to the routine for a medium body type.
     *
     * @param level            the level of football the user is at
     * @param distance         the distance the user has to run for conditioning
     * @param firstGymSession  the first gym session to add
     * @param secondGymSession the second gym session to add
     */
    public void addMediumSessions(FootballLevel level, int distance, FitnessSession firstGymSession, FitnessSession secondGymSession) {
        // Week A
        addFootballSession();
        sessions.add(firstGymSession.copy());

        addFootballSession();
        sessions.add(new ConditioningSession(distance));

        // Week B
        addFootballSession();
        sessions.add(secondGymSession.copy());

        addFootballSession();
        sessions.add(new ConditioningSession(distance));

        if (shouldAddExtraSession(level)) {
            addFootballSession();
            sessions.add(firstGymSession.copy());

            addFootballSession();
            sessions.add(new ConditioningSession(distance));

        }
    }

    /**
     * Adds a football session to the routine for a heavy body type.
     *
     * @param level            the level of football the user is at
     * @param distance         the distance the user has to run for conditioning
     * @param firstGymSession  the first gym session to add
     * @param secondGymSession the second gym session to add
     */
    private void addHeavySessions(FootballLevel level, int distance, FitnessSession firstGymSession, FitnessSession secondGymSession) {
        // Week A
        addFootballSession();
        sessions.add(new ConditioningSession(distance));

        addFootballSession();
        sessions.add(firstGymSession.copy());

        // Week B
        addFootballSession();
        sessions.add(new ConditioningSession(distance));

        addFootballSession();
        sessions.add(secondGymSession.copy());

        // Adds the extra sessions if semi committed or above
        if (shouldAddExtraSession(level)) {
            addFootballSession();
            sessions.add(new ConditioningSession(distance));

            addFootballSession();
            sessions.add(firstGymSession.copy());

        }
    }

    /**
     * Adds sessions associated with a very heavy body type routine
     *
     * @param level    the level the user is at football
     * @param distance the distance the user has to run for conditioning
     */
    private void addVeryHeavySessions(FootballLevel level, int distance) {
        sessions.add(new ConditioningSession(distance));
        addFootballSession();
        sessions.add(new ConditioningSession(distance));

        if (shouldAddExtraSession(level)) {
            addFootballSession();
            sessions.add(new ConditioningSession(distance));
        }

        repeatSessions();
    }

    /**
     * Adds a football session to the routine.
     */
    private void addFootballSession() {
        sessions.add(new FootballSession());
    }

    /**
     * Returns a boolean representing whether or not the user needs to have a harder routine by
     * adding more fitness sessions to the routine.
     *
     * @param level the level of football the routine is at
     * @return a boolean of whether extra sessions should be added
     */
    private boolean shouldAddExtraSession(FootballLevel level) {
        return level == FootballLevel.SEMI_COMMITTED || level == FootballLevel.COMMITTED;
    }

    /**
     * Takes the current sessions array and repeats all its values.
     * Switches LowerBodyGymSessions with UpperBodyGymSessions, and vice versa.
     */
    private void repeatSessions() {
        List<FitnessSession> repeatedSessions = new ArrayList<>();
        for (FitnessSession session : sessions) {

            // Switches the lower and upper body fitness sessions
            if (session instanceof LowerBodyGymSession) {
                repeatedSessions.add(new UpperBodyGymSession());
            } else if (session instanceof UpperBodyGymSession) {
                repeatedSessions.add(new LowerBodyGymSession());
            } else {
                repeatedSessions.add(session.copy());
            }
        }
        sessions.addAll(repeatedSessions);
    }

    private int getDistance(InjuryType injuryType) {
        switch (injuryType) {
            case UPPER_BODY:
                return 10;
            case LOWER_BODY:
            case COMBINED:
                return 12;
            default:
                return 8;
        }
    }

    /**
     * returns the class into a neat string used to represent the sessions inside the routine'
     *
     * @return the string describing the class
     */
    @NonNull
    @Override
    public String toString() {
        StringBuilder routine = new StringBuilder();
        routine.append("Routine:\n");
        for (FitnessSession session : sessions) {
            routine.append("    ").append(session.getName()).append(": ").append(session.getDescription()).append("\n");
        }
        return routine.toString();
    }

    /**
     * Bundles the routine into an intent by converting the routines and necessary values into a
     * string so it can be passed through different activities.
     * Works with the Routine(Intent intent) constructor.
     *
     * @param intent the intent to bundle the routine into
     */
    public void bundleRoutine(Intent intent) {
        intent.putExtra("fitnessSessions", sessions.size());

        for (int i = 0; i < sessions.size(); i++) {
            intent.putExtra("fitnessSession" + i, sessions.get(i).bundleToString());
        }
    }


    /**
     * Given the string representing a session, returns its respective fitness session
     *
     * @param sessionString a string representing a session
     * @return the corresponding fitness
     */
    private FitnessSession createSession(String sessionString) {
        String[] splitString = sessionString.split(",");
        switch (splitString[0]) {
            case "ConditioningSession":
                return new ConditioningSession(sessionString);
            case "Football":
                return new FootballSession(sessionString);
            case "LowerBodyGymSession":
                return new LowerBodyGymSession(sessionString);
            case "UpperBodyGymSession":
                return new UpperBodyGymSession(sessionString);
            default:
                return null;
        }
    }

    /**
     * Returns the routine for week A in a string format to display
     *
     * @return a string representing the routine for week A
     */
    public String getWeekAString() {
        StringBuilder weekA = new StringBuilder();
        Log.d("NumSessions", "" + numSessions);

        // Loops through the first half of the session
        for (int i = 0; i < numSessions; i++) {
            weekA.append(i + 1).append(") ").append(sessions.get(i).getName()).append("\n");
            Log.d("Routine", i + ") " + sessions.get(i).getName());
        }
        return weekA.toString();
    }

    /**
     * Returns the routine for week B in a string format to display
     *
     * @return a string representing the routine for week B
     */
    public String getWeekBString() {
        StringBuilder weekB = new StringBuilder();
        int num = 1;
        // Loops through the last half of the sessions
        for (int i = numSessions; i < 2 * numSessions; i++) {
            weekB.append(num++).append(") ").append(sessions.get(i).getName()).append("\n");
            Log.d("Routine", i + ") " + sessions.get(i).getName());
        }
        return weekB.toString();
    }

    /**
     * Returns a string representation of the routine and its sessions.
     * Can be converted back to a routine using the Routine(String routineString) constructor.
     *
     * @return a string representing the routine instance and its sessions
     */
    public String bundleToString() {
        StringBuilder sb = new StringBuilder();
        sb.append(sessions.size()).append("\n");

        for (int i = 0; i < sessions.size(); i++) {
            FitnessSession session = sessions.get(i);
            sb.append(session.bundleToString()).append("\n");
        }
        return sb.toString();
    }
}